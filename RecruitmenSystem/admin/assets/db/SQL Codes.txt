
TEMPLATE 
==========



 CREATE TABLE Tbl
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),

  status NVarchar(50)
 )




	INSERT INTO Tbl() 
			VALUES()


	SELECT * FROM Tbl


 CREATE PROC sp
  @id bigInt, 
  @status NVarchar(50),

  AS

 IF EXISTS(SELECT * FROM Tbl WHERE id=@id)

 BEGIN
	UPDATE Tbl  SET status = @status WHERE id = @id
 END

 ELSE
 
 BEGIN
	INSERT INTO Tbl( status) VALUES(@status)
 END




Login
--------

CREATE PROC spLogin
@id bigInt, @FullName NVarchar(50), @email NVarchar(50), @password NVarchar(50), @tellNum NVarchar(50), @status NVarchar(50) 
AS

IF EXISTS(SELECT * FROM users u WHERE u.email=@email AND u.password=@password)
BEGIN
		SELECT u.id, u.fullName,  u.email, u.tellNum, u.status FROM users u
END





  Tables, Procedures, ...
==========================


  Module 1: Management 
 --------------------

 Table 1. Users


 

CREATE TABLE users
 (
   id bigInt PRIMARY KEY IDENTITY(1,1),
   fullName NVarchar(50),
   gender NVarchar(50),
   dob NVarchar(50),
   tellNum NVarchar(50),
   email NVarchar(50),
   password NVarchar(50),
   imgUrl NVarchar(MAX),
   regDate NVarchar(50),
   userId int,
   status NVarchar(50)
 )

 INSERT INTO users(fullName,gender,dob,tellNum,email,password,imgUrl,regDate,userId,status)
		VALUES('Abdifatah Abdirahman','Male','23-11-1996','0619159786','Annaati@gmail.com',
		'1223', 'assets/img/annaati.png', '02-01-2022',0,'active')


		SELECT * FROM users

		

 CREATE PROC spUsers
  @id bigInt, @fullName NVarchar(50), @gender NVarchar(50), @dob NVarchar(50),@tellNum NVarchar(50),
  @email NVarchar(50),@password NVarchar(50), @imgUrl NVarchar(MAX),@regDate NVarchar(50),@userId int,@status NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM users u WHERE u.id=@id)

 BEGIN
	UPDATE users SET  fullName = @fullName, tellNum = @tellNum,
	email = @email, imgUrl = @imgUrl, status = @status WHERE id = @id
	Select 'User details Updated' as msg
 END

 ELSE IF EXISTS(SELECT u.email,u.tellNum FROM users u WHERE u.email=@email OR u.tellnum=@tellNum)
 BEGIN
	SELECT 'Email or Tell Number already exist' as msg
 END

 ELSE
 
 BEGIN
	INSERT INTO users(fullName,gender,dob,tellNum,email,password,imgUrl,regDate,userId,status) 
		VALUES(@fullName,@gender,@dob,@tellNum,@email,@password,@imgUrl,@regDate,@userId,@Status)
	Select 'User details Registered' as msg
 END





 Table 2: Menus



 CREATE TABLE menus
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  menuTex NVarchar(50),
  menuIcon NVarchar(50)
 )




    INSERT INTO menus(menuTex,menuIcon) VALUES('Management', 'fas fa-settings')


   SELECT * FROM menus


 CREATE PROC spmenus
  @id bigInt,@menuTex NVarchar(50),@menuIcon NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM menus WHERE id=@id)

 BEGIN
	UPDATE menus  SET menuTex = @menuTex, menuIcon = @menuIcon WHERE id = @id
	Select 'Menu details Updated' as msg
 END

 ELSE IF EXISTS(SELECT * FROM menus m WHERE M.menuTex=@menuTex)

 BEGIN
		SELECT 'Menu is registered already'
 END

 ELSE
 
 BEGIN
	INSERT INTO menus(menuTex, menuIcon) VALUES(@menuTex,@menuIcon)
	Select 'Menu details registered' as msg
 END



 Table 3: SubMenus



 CREATE TABLE subMenus
 (
 id bigInt PRIMARY KEY IDENTITY(1,1),
 smText NVarchar(50),
 smhRef NVarchar(50)
 )




	INSERT INTO subMenus(smText,smhRef) VALUES('Users', 'forms/users.aspx')


	SELECT * FROM subMenus


 CREATE PROC spSubMenus
  @id bigInt,@smText NVarchar(50),@smhRef NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM subMenus sm WHERE sm.id=@id)

 BEGIN
	UPDATE subMenus SET smText = @smText, smhRef = @smhRef WHERE id = @id
	Select 'SubMenu details Updated' as msg
 END

 ELSE IF EXISTS(SELECT * FROM subMenus sm WHERE sm.smText=@smText)

 BEGIN
		SELECT 'Sub Menu is registered already'
 END

 ELSE
 
 BEGIN
	INSERT INTO subMenus(smText, smhRef) VALUES(@smText,@smhRef)
	Select 'SubMenu details registered' as msg
 END



 Table 4: Permissions


 CREATE TABLE permissions
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  userId bigInt,
  menuId bigInt,
  smId bigInt
 )




	INSERT INTO permissions(userId,menuId,smId) VALUES(1,1,1)


	SELECT * FROM permissions


 CREATE PROC spPermissions
  @id bigInt,@userId  bigInt,@menuId  bigInt,@smId  bigInt

  AS

 IF EXISTS(SELECT * FROM permissions p WHERE p.id=@id)

 BEGIN
	UPDATE permissions SET userId=@userId,menuId=@menuId,smId=@smId  WHERE id = @id
	Select 'Permission details Updated' as msg
 END

 ELSE IF EXISTS(SELECT * FROM permissions p WHERE p.userId=@userId AND p.menuId=@menuId AND p.smId=@smId)

 BEGIN
		SELECT 'Permission is granted already'
 END

 ELSE
 
 BEGIN
	INSERT INTO permissions(userId,menuId,smId) VALUES(@userId,@menuId,@smId)
	Select 'Permission	 details Registered' as msg
 END










  Module 2: Process
 -------------------


 Table 1: Process




CREATE TABLE process
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  recrId bigInt, 
  procName NVarchar(50), 
  descr NVarchar(500), 
  Date NVarchar(50),
  status NVarchar(50)
 )




	INSERT INTO process(recrId, procName, descr, Date, Status) 
			VALUES(1, 'Initial Screening', 'Initial Screening is the first Process after shortlistings', '2022/02/20', 'pending')


	SELECT * FROM process


 CREATE PROC spProcess
  @id bigInt, @recrId  NVarchar(50), @procName  NVarchar(50), @descr  NVarchar(50), 
  @Date  NVarchar(50), @status NVarchar(50), @msg NVarchar(500) OUT

  AS

 IF EXISTS(SELECT * FROM process WHERE id=@id)

 BEGIN
	UPDATE process  SET recrId = @recrId, procName = @procName, descr = @descr, status = @status WHERE id = @id
	SET @msg = 'Process Details Updated Successfully'
 END

 ELSE
 
 BEGIN
	INSERT INTO process(recrId, procName, descr, Date, Status) VALUES(@recrId, @procName, @descr, @Date, @status)
	SET @msg = 'Process Details Registered Successfully'
 END



 Table 2: ProcStep







   Module 3: Jobs
  ----------------------

 Table 1: Job Category

 CREATE TABLE jobCategory
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  orgId bigInt,
  catName NVarchar(50),
  descr NVarchar(MAX),
  regDate  NVarchar(50),
  userId bigInt,
  status NVarchar(30)
 )




    INSERT INTO jobCategory(orgId, catName, descr, regDate, userId, status) VALUES(1,'Marketing', 'We need an expereienced Marketer 
						who has being in the field for at 4+ yrs and hold a degree in the in the field 
						or related feilds', '2022/02/03', 0, 'Active')


	SELECT * FROM jobCategory


 CREATE PROC spJobCategory
  @id bigInt, @orgId bigInt, @catName NVarchar(50),@descr NVarchar(MAX), @regDate NVarchar(50), @userId bigInt, 
	@status NVarchar(30), @msg Nvarchar(500) OUT

  AS

 IF EXISTS(SELECT * FROM jobCategory WHERE id=@id)

 BEGIN
	UPDATE jobCategory  SET catName=@catName, descr=@descr, status = @status WHERE id = @id
	SET @msg = 'Job category details Updated Successfully' 
END

ELSE IF EXISTS(SELECT catName FROM jobCategory WHERE catName = @catName)
BEGIN
	SET @msg = 'Category Name Exists'
END

 ELSE
 BEGIN
	INSERT INTO jobCategory(orgId, catName, descr, regDate, userId, status) 
			VALUES(@orgId, @catName,@descr, @regDate, @userId, @status)
	SET @msg = 'Job Category details Registered Successfully' 
 END





 Table 2: Job Position

CREATE TABLE jobPosition
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  jpName NVarchar(50),
  jpDescr NVarchar(MAX),
  regDate  NVarchar(50),
  userId bigInt,
  status NVarchar(30)
 )




	INSERT INTO jobPosition(jpName, jpDescr, regDate, userId, status) 
	VALUES('Digital Marketer','We are hiring for a experienced 
		digital with a work experience of at least 4+ yrs and 
		a degree in the feild or related feilds. anyother thing 
		could be a plus and give you the edge', '2022/02/03', 0, 'active')


	SELECT * FROM jobPosition


 CREATE PROC spJobPosition
    @id bigInt, @jpName NVarchar(50),@jpDescr NVarchar(MAX), @regDate  NVarchar(50), 
    @userId bigInt, @status NVarchar(30), @msg NVarchar(500) OUT

  AS

 IF EXISTS(SELECT * FROM jobPosition WHERE id=@id)

 BEGIN
	UPDATE jobPosition  SET jpName=@jpName,jpDescr=@jpDescr, status = @status WHERE id = @id
	SET @msg = 'Job Position details Updated successfully'
 END

 ELSE IF EXISTS(SELECT * FROM jobPosition WHERE jpName = @jpName)
 BEGIN
		SET @msg = 'Job Position Exists'
 END

 ELSE
 
 BEGIN
	INSERT INTO jobPosition(jpName,jpDescr, regDate, userId, status) 
		VALUES(@jpName,@jpDescr, @regDate, @userId, @status)
	SET @msg = 'Job Position details Registered successfully'  
END







 Table 3: Job platForm

CREATE TABLE jobplatForm
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  jobId bigInt,
  pfName NVarchar(50), 
  pfdescr NVarchar(MAX),
  regDate  NVarchar(50),
  userId bigInt,
  status NVarchar(30)
 )




	INSERT INTO jobplatForm(jobId, pfName, pfdescr, regDate, userId, status) 
		    	VALUES(1, 'FaceBook', 'This Job was posted 
				on FaceBook with ad', '2022/02/03', 0, 'active')


	SELECT * FROM jobplatForm


 CREATE PROC spJobplatForm
    @id bigInt, @jobId  bigInt, @pfName  NVarchar(50), @pfdescr NVarchar(MAX), @regDate  NVarchar(50), 
    @userId bigInt, @status NVarchar(30), @msg NVarchar(500) OUT

  AS

 IF EXISTS(SELECT * FROM jobplatForm WHERE id=@id)

 BEGIN
	UPDATE jobplatForm SET jobId=@jobId, pfName=@pfName, pfdescr=@pfdescr, status = @status  WHERE id = @id
	SET @msg = 'Job Platform details Updated successfully'
END

ELSE IF EXISTS(SELECT * FROM jobplatForm WHERE pfName = @pfName)
 BEGIN
		SET @msg = 'Job Platform Exists'
 END

 ELSE
 
 BEGIN
	INSERT INTO jobplatForm(jobId, pfName, pfdescr, regDate, userId, status) 
			VALUES(@jobId, @pfName, @pfdescr, @regDate, @userId, @status)
	SET @msg = 'Job Platform etails Updated successfully'
END






 Table 4: Organizations

CREATE TABLE organizations
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  orgName NVarchar(50), 
  descr NVarchar(MAX),
  tellNum NVarchar(50), 
  email NVarchar(50), 
  password NVarchar(50), 
  logo NVarchar(MAX), 
  regDate NVarchar(50), 
  userId bigInt, 
  status NVarchar(30)
 )




	INSERT INTO organizations(orgName,descr, tellNum, email, password, logo, regDate, userId, status) 
			VALUES('A3N Tech', 'A3N Tech was established in November 2021 in Mogadishu, Somalia by a team of 4 students.
				It Provides Tech  oriented services like: Software develeopment, Graphic & Motion, ERP Systems among others ', '0613393939',
				'A3NTechnologies.com', '12345', '', '2022/02/03', 0, 'Active')


	SELECT * FROM organizations


 CREATE PROC spOrganizations
  @id bigInt, @orgName NVarchar(50), @descr NVarchar(MAX), @tellNum NVarchar(50), @email NVarchar(50), @password NVarchar(50), 
  @logo NVarchar(MAX), @regDate NVarchar(50), @userId bigInt, @status NVarchar(30), @msg NVarchar(500) OUT
 

  AS

  IF EXISTS(SELECT * FROM organizations WHERE id=@id)
 BEGIN
	UPDATE organizations  SET orgName=@orgName,descr=@descr, tellNum = @tellNum, email = @email, 
			logo = @logo, status = @status WHERE id = @id
	SET @msg = 'Organization details Updated Succesfully' 
END

 ELSE IF EXISTS(SELECT * FROM organizations org WHERE org.orgName = @orgName OR org.email = @email OR org.tellNum = @tellNum)
BEGIN
	SET @msg = 'Organization Name, Email or TellNumber already Exists'
END





 Table 5: Jobs

 CREATE TABLE jobs
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  jCatId bigInt,
  jPosId bigInt,
  jPid bigInt,
  orgId bigInt,
  procId bigInt,
  jDescr NVarchar(MAX),
  publishedDate NVarchar(50),
  deadLine NVarchar(50),
  numPositions bigInt,
  startDate NVarchar(50),
  status NVarchar(50)
 )




	INSERT INTO jobs(jCatId, jPosId, jPid, orgId, procId, jDescr, publishedDate, deadLine, numPositions, startDate, status) 
			VALUES(1,1,1,1,1, 'as digital Marketr, you will be performing a wide range of Digatal Marketing envolving 
				Social Media Marketingm, SEO Marketing amongst others working with a wide range of teams',
					'02-01-2022','31-01-2022',2,'20-02-2022','Open')


	SELECT * FROM jobs


 CREATE PROC spJobs
  @id bigInt, @jCatId bigInt, @jPosId bigInt, @jPid bigInt, @orgId bigInt, @procId bigInt, 
  @jDescr NVarchar(MAX), @publishedDate NVarchar(50), @deadLine NVarchar(50), 
  @numPositions bigInt, @startDate NVarchar(50), @status NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM jobs WHERE id=@id)

 BEGIN
	UPDATE jobs  SET jCatId = @jCatId, jPosId = @jPosId, jPid = @jPid, 
	orgId = @orgId, procId = @procId, jDescr = @jDescr, 
	publishedDate = @publishedDate, deadLine = @deadLine, 
	numPositions = @numPositions, startDate = @startDate, 
	status = @status WHERE id = @id
	Select 'Job details Updated' as msg
 END

 ELSE
 
 BEGIN
	INSERT INTO jobs(jCatId, jPosId, jPid, orgId, procId, jDescr, publishedDate, deadLine, numPositions, startDate, status) 
	VALUES(@jCatId, @jPosId, @jPid, @orgId, @procId, @jDescr, @publishedDate, @deadLine, @numPositions, @startDate, @status)
	Select 'Jobs details Registered' as msg
 END










   Module 4: Applicant
  ----------------------

 Table 1: Applicant


CREATE TABLE applicant
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  fullName NVarchar(50),
  gender NVarchar(30),
  dob NVarchar(50),
  tellNum NVarchar(50),
  address NVarchar(50),
  email NVarchar(50),
  password NVarchar(50),
  imgUrl NVarchar(MAX),
  regDate NVarchar(50), 
  status NVarchar(50)
 )




	INSERT INTO applicant(fullName,gender,dob,tellNum,address,email,password,imgUrl,regDate, status) 
			VALUES('Ali Farah Hassan', 'Male', '26-10-1990', '0615535339', 'Hodan, Mog', 'AFHassan553@gmail.com', 
			'1233', 'assets/img/afh553.png', '22-01-2022', 'Active')


	SELECT * FROM applicant


 CREATE PROC spApplicant
  @id bigInt, @fullName NVarchar(50),@gender NVarchar(30),@dob NVarchar(50),@tellNum NVarchar(50),@address  NVarchar(50), 
  @email NVarchar(50),@password NVarchar(50),@imgUrl NVarchar(MAX),@regDate NVarchar(50), @status NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM applicant WHERE id=@id)

 BEGIN
	UPDATE applicant SET fullName = @fullName, tellNum = @tellNum, address = @address, 
		email = @email, imgUrl = @imgUrl,  status = @status WHERE id = @id
	Select 'Applicant details Updated' as msg
 END

 ELSE
 
 BEGIN
	INSERT INTO applicant(fullName,gender,dob,tellNum,address,email,password,imgUrl,regDate, status) 
		VALUES(@fullName,@gender,@dob,@tellNum,@address,@email,@password,@imgUrl,@regDate,@status)
	Select 'Applicant details Registered' as msg
 END



CREATE PROC selectApplications
AS
BEGIN
SELECT a.id, ap.fullName, jp.jpName, applicationDate, a.education, a.experiance, a.otherInfo, a.status FROM application a 
	INNER JOIN applicant ap ON a.applicantId = ap.id 
	INNER JOIN jobs j ON a.jobId = j.id 
	INNER JOIN jobPosition jp ON j.jPosId = jp.id
END




 Table 2: Apllication

CREATE TABLE apllication
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  applicantId bigInt, 
  jobId bigInt, 
  applicationDate NVarchar(50), 
  education NVarchar(50), 
  experiance NVarchar(50), 
  otherInfo NVarchar(MAX),
  status NVarchar(50)
 )




	INSERT INTO apllication(applicantId, jobId, applicationDate, education, experiance, otherInfo, status) 
			VALUES(1, 1, '22-01-2022', 'Bachelor CS and IT', '2+ yrs', 'Diploma in Software Engineering', 'pending')


	SELECT * FROM apllication


 CREATE PROC spApllication
  @id bigInt, @applicantId bigInt, @jobId bigInt, @applicationDate  NVarchar(50), @education NVarchar(50), 
  @experiance NVarchar(50), @otherInfo NVarchar(MAX),@status NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM apllication WHERE id=@id)

 BEGIN
	UPDATE apllication SET applicantId = @applicantId, jobId = @jobId, applicationDate = @applicationDate, education = @education, 
		experiance = @experiance, otherInfo = @otherInfo, status = @status WHERE id = @id
	Select 'Application details Updated' as msg
 END

 ELSE
 
 BEGIN
	INSERT INTO apllication(applicantId, jobId, applicationDate, education, experiance, otherInfo, status) 
		VALUES(@applicantId, @jobId, @applicationDate, @education, @experiance, @otherInfo, @status)
	Select 'Application details Registered' as msg
 END






 Table 3: Application Document

 CREATE TABLE applicationDocument
 (
  id bigInt PRIMARY KEY IDENTITY(1,1),
  applicantId bigInt,
  docName NVarchar(50), 
  DocUrl NVarchar(50), 
  uploadDate NVarchar(50),
  status NVarchar(50)
 )




	INSERT INTO applicationDocument(applicantId, docName, DocUrl, uploadDate, status) 
			VALUES(1, 'Resume', 'assets/docs/app_1_Resume.doc', '22-010-2022', 'pending')


	SELECT * FROM applicationDocument


 CREATE PROC spApplicationDocument
  @id bigInt, @applicantId bigInt, @docName NVarchar(50), @DocUrl NVarchar(50), @uploadDate NVarchar(50), @status NVarchar(50)

  AS

 IF EXISTS(SELECT * FROM applicationDocument WHERE id=@id)

 BEGIN
	UPDATE applicationDocument  SET applicantId = @applicantId, docName = @docName, DocUrl = @DocUrl, 
			uploadDate = @uploadDate, status = @status WHERE id = @id
	Select 'Application Document details Updated' as msg
 END

 ELSE
 
 BEGIN
	INSERT INTO applicationDocument(applicantId,docName, DocUrl, uploadDate, status) 
		VALUES(@applicantId, @docName, @DocUrl, @uploadDate, @status)
	Select 'Application document details Registered' as msg
 END










   Module 5: Tests & InterViews
  -------------------------------










   Module 6: Recruiters
  ---------------------------










Login Stored Procedure
-------------------------



 CREATE PROC spLogin
  @email NVarchar(50), @password NVarchar(50)
  --@id bigInt, @FullName NVarchar(50),  , @tellNum NVarchar(50), @status NVarchar(50) 
  AS

  IF EXISTS(SELECT * FROM users u WHERE u.email=@email AND u.password=@password)
  BEGIN
		SELECT u.id, u.fullName,  u.email, u.tellNum, u.status, 'admin' AS role, 'success' as msg FROM users u
  END
  ELSE IF EXISTS(SELECT * FROM applicant)
  BEGIN
	  SELECT a.id, a.fullName, a.email, a.password, a.status, 'user' AS role, 'success' as msg FROM applicant a WHERE a.email = @email AND a.password = @password
  END

  ELSE
  BEGIN
	   SELECT 'Invalid Email or Passwors' as msg
  END


